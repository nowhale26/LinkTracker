/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.67).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package backend.academy.scrapper.links.model;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
public interface LinksApi {

    @Operation(
        summary = "Убрать отслеживание ссылки",
        description = "",
        tags = {})
    @ApiResponses(
        value = {
            @ApiResponse(
                responseCode = "200",
                description = "Ссылка успешно убрана",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = LinkResponse.class))),
            @ApiResponse(
                responseCode = "400",
                description = "Некорректные параметры запроса",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = ApiErrorResponse.class))),
            @ApiResponse(
                responseCode = "404",
                description = "Ссылка не найдена",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = ApiErrorResponse.class)))
        })
    @RequestMapping(
        value = "/links",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.DELETE)
    ResponseEntity<LinkResponse> linksDelete(
        @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema())
        @RequestHeader(value = "Tg-Chat-Id", required = true)
        Long tgChatId,
        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema())
        @Valid
        @RequestBody
        RemoveLinkRequest body);

    @Operation(
        summary = "Получить все отслеживаемые ссылки",
        description = "",
        tags = {})
    @ApiResponses(
        value = {
            @ApiResponse(
                responseCode = "200",
                description = "Ссылки успешно получены",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = ListLinksResponse.class))),
            @ApiResponse(
                responseCode = "400",
                description = "Некорректные параметры запроса",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = ApiErrorResponse.class)))
        })
    @RequestMapping(
        value = "/links",
        produces = {"application/json"},
        method = RequestMethod.GET)
    ResponseEntity<ListLinksResponse> linksGet(
        @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema())
        @RequestHeader(value = "Tg-Chat-Id", required = true)
        Long tgChatId);

    @Operation(
        summary = "Добавить отслеживание ссылки",
        description = "",
        tags = {})
    @ApiResponses(
        value = {
            @ApiResponse(
                responseCode = "200",
                description = "Ссылка успешно добавлена",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = LinkResponse.class))),
            @ApiResponse(
                responseCode = "400",
                description = "Некорректные параметры запроса",
                content =
                @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = ApiErrorResponse.class)))
        })
    @RequestMapping(
        value = "/links",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    ResponseEntity<LinkResponse> linksPost(
        @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema())
        @RequestHeader(value = "Tg-Chat-Id", required = true)
        Long tgChatId,
        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema())
        @Valid
        @RequestBody
        AddLinkRequest body);

    @RequestMapping(
        value = "/tag",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Void> enableTagInUpdates(
        @RequestHeader(value = "Tg-Chat-Id") Long tgChatId, @RequestBody EnableTagRequest body);

    @RequestMapping(value = "/digest", produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Void> enableDigest(@RequestHeader(value = "Tg-Chat-Id") Long tgChatId, @RequestBody EnableDigestRequest body);
}
